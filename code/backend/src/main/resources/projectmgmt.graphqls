# TODO 1: --------------------------------------------------------------------------
#
# Create the type 'Project'
#
# FIELDS (all required, non-null, except otherwise noted)
#
# id (ID)
# title and description (strings)
# owner: reference to "User" type
# category: reference to "Category" type
# tasks: List of "Task" objects
# task: excpects one argument (id) and returns a "Task" object (might return null)
#

# TODO 2: --------------------------------------------------------------------------
#
# Add both fields "project" and "projects" to the existing "Query" type

# 'projects': returns a list of "Project"-types (not null)
# 'project': returns a single project (might be null)
#            takes one parameter, id of the requested project
#

# TODO 3: --------------------------------------------------------------------------
# Add the 'updateTaskState' mutation:
# The mutation expects to arguments:
#    taskId (not null)
#    newState (not null)
# The mutation should return a Task object (required, not-null)

# TODO 4: --------------------------------------------------------------------------
#
# - add some documentation to your scheme and inspect it in GraphiQL
#
#
# VIEWING YOUR CHANGES IN GRAPHIQL
# ----------------------------------------------------------------------------------
#
# You can see your scheme at any time in GraphiQL (http://localhost:5000/graphiql.html)
#
#  - After changing the schema file, you have to rebuild and restart your app
#  - After restarting your app, you have to reload the page in graphiql, so that graphiql
#    picks up your changes
#
# !! IMPORTANT: RUNNING queries in GraphiQL won't work now, as the implementation is missing,
# !!            but you should be able to see your types in the documentation and code completion
#

type User {
  id: ID!
  login: String!
  name: String!
  requestId: String!
}

type Category {
  id: ID!
  name: String!
}

enum TaskState {
  NEW
  RUNNING
  FINISHED
}

type Task {
  id: ID!
  title: String!
  description: String!
  state: TaskState!
  assignee: User!
  toBeFinishedAt: String!
}

type Query {
  ping(msg: String): String!
  users: [User!]!
  user(id: ID!): User
}

input AddTaskInput {
  title: String!
  description: String!
  toBeFinishedAt: String
  assigneeId: ID!
}

type Mutation {
  addTask(projectId: ID!, input: AddTaskInput!): Task!
}

type Subscription {
  onNewTask(projectId: ID): Task!
  onTaskChange(projectId: ID): Task!
}
